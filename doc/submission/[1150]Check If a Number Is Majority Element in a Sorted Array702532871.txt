class Solution:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        def findsmaller(l, r):
            found = False

            while l <= r:
                if l == r:
                    return l-1, found
                m = (r-l) // 2 + l
                if not found and nums[m] == target:
                    found = True
                if not m:
                    return -1, found
                if nums[m-1] < target and nums[m] == target:
                    return m-1, found
                elif nums[m] >= target:
                    r = m-1
                else:
                    l = m+1
            return -1, found

        left, found = findsmaller(0, len(nums)-1)
        if not found:
            return False

        def findGreater(l, r):
            _found = False

            while l <= r:
                if l == r:
                    return r+1, _found
                m = (r-l) // 2 + l
                if not _found and nums[m] == target:
                    _found = True
                if m >= len(nums)-1:
                    return len(nums), _found
                if nums[m+1] > target and nums[m] == target:
                    return m + 1, _found
                elif nums[m] >= target:
                    l = m+1
                else:
                    r = m-1
            return len(nums), _found

        right, _ = findGreater(0, len(nums) - 1)
        print(left, right)
        
        if right-left-1 > len(nums) // 2:
            return True
        return False



# total_testcases:40
# total_correct:38
# input_formatted:"[4,4,4,4,5,5,6,6,6],5"
# expected_output:false
# code_output:true
