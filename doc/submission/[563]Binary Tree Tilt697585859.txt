# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from collections import defaultdict
class Solution:
    def findTilt(self, root: Optional[TreeNode]) -> int:
        d = defaultdict(lambda: 0)
        tiltSum = 0
        s = [root]
        while s:
            node = s.pop()
            if node == -1:
                node = s.pop()
                tiltSum += abs(d[node.left]-d[node.right])
                d[node] = d[node.left]+d[node.right]+node.val
            elif node:
                s.append(node)
                s.append(-1)
                s.append(node.right)
                s.append(node.left)
        return tiltSum

# runtime:142 ms
# memory:15.5 MB
