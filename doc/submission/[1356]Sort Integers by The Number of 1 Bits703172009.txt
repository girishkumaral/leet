NibbleToBitCount = {
    0: 0,
    1: 1,
    2: 1,
    3: 2,
    4: 1,
    5: 2,
    6: 2,
    7: 3,
    8: 1,
    9: 2,
    10: 2,
    11: 3,
    12: 2,
    13: 3,
    14: 3,
    15: 4
}


def byte2bitCount(num):
    return NibbleToBitCount[(0xf & num)] + NibbleToBitCount[(0xf0 & num) >> 4]


def int2bitCount(num):
    return ByteToBitCount[(0xff & num)] + \
           ByteToBitCount[(0xff00 & num) >> 8] + \
           ByteToBitCount[(0xff0000 & num) >> 16] + \
           ByteToBitCount[(0xff000000 & num) >> 24]


ByteToBitCount = dict()
for i in range(256):
    ByteToBitCount[i] = byte2bitCount(i)


class Solution:
    class SortObj:
        x = 0

        def __init__(self, x):
            self.x = x

        def __lt__(self, other):
            if int2bitCount(self.x) < int2bitCount(other.x):
                return True
            return self.x < other.x

    def sortByBits(self, arr: List[int]) -> List[int]:
        for j in range(len(arr)):
            arr[j] = self.SortObj(arr[j])

        arr.sort(key=lambda x: x)
        for j in range(len(arr)):
            arr[j] = arr[j].x
        return arr

# total_testcases:77
# total_correct:5
# input_formatted:"[1111,7644,1107,6978,8742,1,7403,7694,9193,4401,377,8641,5311,624,3554,6631]"
# expected_output:[1,624,1107,4401,8641,8742,377,1111,6978,3554,7694,9193,5311,6631,7403,7644]
# code_output:[1,624,377,1107,4401,8641,8742,1111,3554,5311,6631,6978,7694,9193,7403,7644]
